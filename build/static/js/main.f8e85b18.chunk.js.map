{"version":3,"sources":["Person/Person.js","App.js","registerServiceWorker.js","index.js"],"names":["Radium","props","react_default","a","createElement","className","style","@media (min-width: 500px)","width","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","otherState","showPersons","switchNameHandler","newName","_this","setState","nameChangedHandler","event","personIndex","findIndex","p","person","Object","objectSpread","target","toConsumableArray","deletePersonHandler","splice","togglePersonsHandler","doesShow","_this2","this","styles","backgroundColor","color","font","border","padding","cursor",":hover","style_root","map","index","Person_Person","key","classes","length","push","join","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f8e85b18.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';\nimport Radium from 'radium';\n\nconst person = ( props ) => {\n    const style = {\n        '@media (min-width: 500px)' : {\n            width:'450px'\n        }\n    }\n    return (\n        <div className='Person' style={style}>\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old!</p>\n            <p>{props.children}</p>\n            <input type='text' onChange={props.changed} value={props.name}/>\n            \n        </div>\n    )\n};\n\nexport default Radium(person);","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\nimport Radium, {StyleRoot} from 'radium';\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"abc\", name: \"Max\", age: 28 },\n      { id: \"asd\", name: \"Manu\", age: 29 },\n      { id: \"zxc\", name: \"Stephanie\", age: 26 }\n    ],\n    otherState: \"some other value\",\n    showPersons: false\n  };\n\n  switchNameHandler = newName => {\n    // console.log('Was clicked!');\n    // DON'T DO THIS: this.state.persons[0].name = 'Maximilian';\n    this.setState({\n      persons: [\n        { name: newName, age: 28 },\n        { name: \"Manu\", age: 29 },\n        { name: \"Stephanie\", age: 27 }\n      ]\n    });\n  };\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = { ...this.state.persons[personIndex] };\n\n    //const person = Object.assign({}, this.state.persons[personIndex])\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({ persons: persons });\n\n  };\n\n  deletePersonHandler = personIndex => {\n    //const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  render() {\n    const styles = {\n      backgroundColor: \"green\",\n      color: 'white',\n      font: \"inherit\",\n      border: \"1x solid blue\",\n      padding: \"8px\",\n      cursor: 'pointer',\n      ':hover' : {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <StyleRoot>\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <Person\n                click={() => this.deletePersonHandler(index)}\n                name={person.name}\n                age={person.age}\n                key={person.id}\n                changed={(event) => this.nameChangedHandler(event, person.id)}\n              />\n            );\n          })}\n        </div>\n        </StyleRoot>\n      );\n\n      styles.backgroundColor = 'red';\n      styles[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      };\n    }\n\n    const classes = [];\n    if (this.state.persons.length <=2){\n      classes.push('red'); //ckasses=['red']\n    }\n    if (this.state.persons.length <=1) {\n      classes.push('bold'); //classes = ['red', 'bold']\n    }\n\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <p className={classes.join(' ')}> This is really working!</p>\n        <button style={styles} onClick={this.togglePersonsHandler}>\n          Toggle Persons\n        </button>\n        {persons}\n      </div>\n    );\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n}\n\nexport default Radium(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}